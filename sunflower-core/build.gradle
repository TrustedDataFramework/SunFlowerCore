plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'org.tdf'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    maven {
        url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
    }
    mavenLocal()
    maven {
        url 'http://120.76.101.153:8081/repository/maven-public'
    }
    mavenCentral()
}

dependencies {
    // dependency without version number are configured by spring dependency management automatically
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.postgresql:postgresql'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-websocket'
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:${jacksonVersion}"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "junit:junit"


    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    compile project(':common')
    compile project(':crypto')
    compile project(':facade')
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compile "com.google.guava:guava:${guavaVersion}"
    compile "commons-cli:commons-cli:${commonsCliVersion}"
    compile "io.grpc:grpc-all:${gRPCVersion}"
    compile "org.java-websocket:Java-WebSocket:${webSocketVersion}"
    compile "org.apache.commons:commons-math3:${math3Version}"
    compile "com.cedarsoftware:java-util:${cedarsoftwareVersion}" // for deep equals
    compile "com.madgag.spongycastle:core:${scastleVersion}" // for SHA3 and SECP256K1
    compile "com.madgag.spongycastle:prov:${scastleVersion}" // for SHA3 and SECP256K1
    compile "org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}"
    compile "org.rocksdb:rocksdbjni:${rocksdbVersion}"
    compile "org.iq80.leveldb:leveldb-api:${leveldbVersion}"
    compile "org.apache.commons:commons-collections4:${commonsCollections4Version}"
    compile "org.apache.commons:commons-lang3:${commonsLang3Version}"
    compile "com.corundumstudio.socketio:netty-socketio:${nettySocketIOVersion}" // for message push
    compile "org.tdf:rlp:${rlpVersion}"
    compile "org.tdf:lotusvm:${lotusvmVersion}"
    compile "org.springframework.shell:spring-shell-starter:${springShellVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"

    compile "org.ethereum:leveldbjni-all:${leveldbJNIVersion}"
    compile "org.iq80.leveldb:leveldb:${leveldbVersion}"
    // for test and dev
    compile 'com.h2database:h2'
}

task runTestCommunicationTool(type: JavaExec){
    main = "org.wisdom.consortium.util.vm.wasm.TestCommunicationTool"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    if (project.hasProperty("appArgs")) {
        args appArgs.split(" ")
    }
}

task copyDependencies(type: Copy) {
    from configurations.runtime
    destinationDir = file('build/libs/lib')
}

bootRun {
    standardInput = System.in
}

test {
    useJUnitPlatform()
}
