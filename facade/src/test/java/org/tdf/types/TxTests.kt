package org.tdf.types

import com.github.salpadding.rlpstream.Rlp
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4
import org.tdf.common.util.*
import org.tdf.sunflower.types.Bloom
import org.tdf.sunflower.types.LogInfo
import org.tdf.sunflower.types.Transaction
import org.tdf.sunflower.types.TransactionReceipt

@RunWith(JUnit4::class)
class TxTests {

    @Test
    fun test0() {
        val t = Transaction()

        assert(t == t.encoded.decode(Transaction::class.java))
    }


    @Test
    fun test1() {
        val log0 = LogInfo(
            "0x9BCb9B95d403a5A596809F671EEdE14D1C60234C".hex(),
            listOf(
                "0x342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807",
            ).map { it.hex().h256() },
        )

        val log1 = LogInfo(
            "0x9BCb9B95d403a5A596809F671EEdE14D1C60234C".hex(),
            listOf(
                "0x342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                "0x0000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c",
                "0x0000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c"
            )
                .map { it.hex().h256() }
        )

        val log2 = LogInfo(
            "0x9BCb9B95d403a5A596809F671EEdE14D1C60234C".hex(),
            listOf(
                "0x342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                "0x0000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807",
                "0x0000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807"
            ).map { it.hex().h256() }
        )

        val b = Bloom()

        arrayOf(log0, log1, log2).forEach {
            b.or(it.bloom)
        }

        assert(b.toString() == "00000000100000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000040000000000080000000000000000000000000020000000000000000000800000020000000000000000000000000000000000000000000000400000000000020000000000000000000000000000000000200000000000000000800000000000000000000000000000000000000000000080000000000000000000000000000008000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000")

        val r = TransactionReceipt(cumulativeGas = 0x0416b4, logInfoList = listOf(log0, log1, log2))

        assert(r.trie.hex() == "f9028201830416b4bf90177f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234ca00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c80f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780".hex())
        assert(TransactionReceipt.calcTrie(listOf(r)) == "0x736eba201850a81e9f73dd8a665d1707318d68895685ebdbb2566028c85f3e7d".hex())
    }

    @Test
    fun test2() {
        println(HashUtil.EMPTY_LIST_HASH.hex())
    }

    @Test
    fun test3() {
        val receiptRlp = "f9028201830416b4bf90177f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234ca00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c80f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780"
        val li = Rlp.decodeList(receiptRlp.hex().bytes)

        for(i in 0 until li.size()) {
            if(!li.isListAt(i)) {
                println(li.bytesAt(i).hex())
            } else {
                val infos = li.valueAt(i, Array<LogInfo>::class.java)
                println(infos.toList())
            }
        }
    }
}