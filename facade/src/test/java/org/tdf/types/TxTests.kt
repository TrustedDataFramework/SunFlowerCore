package org.tdf.types

import com.github.salpadding.rlpstream.Rlp
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4
import org.tdf.common.types.Uint256
import org.tdf.common.util.*
import org.tdf.evm.SELECTOR_SIZE
import org.tdf.sunflower.types.*
import org.tdf.sunflower.vm.abi.Abi
import java.math.BigInteger

@RunWith(JUnit4::class)
class TxTests {

    @Test
    fun test0() {
        val t = Transaction()
        assert(t == t.encoded.decode(Transaction::class.java))
        val h = HeaderImpl()
        assert(h == h.encoded.decode(HeaderImpl::class.java))

        val t0 = Rlp.decode(
            "f9053080843b9aca01830416b48080b904dc608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73560405160405180910390a33073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73560405160405180910390a33273ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff167f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73560405160405180910390a361034d8061018f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063893d20e81461003b578063a6f9dae114610059575b600080fd5b610043610075565b6040516100509190610259565b60405180910390f35b610073600480360381019061006e91906101fe565b61009e565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461012c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012390610274565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73560405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813590506101f881610300565b92915050565b60006020828403121561021057600080fd5b600061021e848285016101e9565b91505092915050565b610230816102a5565b82525050565b6000610243601383610294565b915061024e826102d7565b602082019050919050565b600060208201905061026e6000830184610227565b92915050565b6000602082019050818103600083015261028d81610236565b9050919050565b600082825260208201905092915050565b60006102b0826102b7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f43616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b610309816102a5565b811461031457600080fd5b5056fea2646970667358221220adccccb1597662156d6c15f2942d38e438a6ed4349e9b1f2001bb7fc702e271564736f6c63430008040033820a95a054cea85d5bf1ce337cbbfe22ace3065570857ba46326fcd7e3b4914bb4f104b0a00dbc3242f7cf58814e1ba2c7d920c91616fe42cec7c74eb70fe6ef1d8f56c045".hex().bytes,
            Transaction::class.java
        )
        assert(Transaction.calcTxTrie(listOf(t0)) == "0xf1f6ff7e5e5659275500edbc87d1d00ceb7db2b81075d053ccfdbdcad5d2beb5".hex())
    }


    @Test
    fun test1() {
        val log0 = LogInfo(
            "0x9BCb9B95d403a5A596809F671EEdE14D1C60234C".hex(),
            listOf(
                "0x342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                "0x0000000000000000000000000000000000000000000000000000000000000000",
                "0x0000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807",
            ).map { it.hex().h256() },
        )

        val log1 = LogInfo(
            "0x9BCb9B95d403a5A596809F671EEdE14D1C60234C".hex(),
            listOf(
                "0x342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                "0x0000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c",
                "0x0000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c"
            )
                .map { it.hex().h256() }
        )

        val log2 = LogInfo(
            "0x9BCb9B95d403a5A596809F671EEdE14D1C60234C".hex(),
            listOf(
                "0x342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                "0x0000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807",
                "0x0000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807"
            ).map { it.hex().h256() }
        )

        val b = Bloom()

        arrayOf(log0, log1, log2).forEach {
            b.or(it.bloom)
        }

        assert(b.toString() == "00000000100000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000040000000000080000000000000000000000000020000000000000000000800000020000000000000000000000000000000000000000000000400000000000020000000000000000000000000000000000200000000000000000800000000000000000000000000000000000000000000080000000000000000000000000000008000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000")

        val r = TransactionReceipt(cumulativeGas = 0x0416b4, logInfoList = listOf(log0, log1, log2))

        assert(
            r.trie.hex() == "f9028201830416b4bf90177f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234ca00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c80f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780".hex()
        )
        assert(TransactionReceipt.calcTrie(listOf(r)) == "0x736eba201850a81e9f73dd8a665d1707318d68895685ebdbb2566028c85f3e7d".hex())
    }

    @Test
    fun test2() {
        println(HashUtil.EMPTY_LIST_HASH.hex())
    }

    @Test
    fun test3() {
        val receiptRlp =
            "f9028201830416b4bf90177f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234ca00000000000000000000000009bcb9b95d403a5a596809f671eede14d1c60234c80f87b949bcb9b95d403a5a596809f671eede14d1c60234cf863a0342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c807a00000000000000000000000008bb3194c582a9f70bdc079e4c20cde4a7fc3c80780"
        val li = Rlp.decodeList(receiptRlp.hex().bytes)

        for (i in 0 until li.size()) {
            if (!li.isListAt(i)) {
                println(li.bytesAt(i).hex())
            } else {
                val infos = li.valueAt(i, Array<LogInfo>::class.java)
                println(infos.toList())
            }
        }
    }

    @Test
    fun test4() {
        val json = """
    [{
        "inputs": [
            {
                "name": "err",
                "type": "string"
            }
        ],
        "name": "Error",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }]
        """.trimIndent()
        val abi = Abi.fromJson(json)
        val err = abi.findFunction { it.name == "Error" }!!
        val encoded =
            "08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001343616c6c6572206973206e6f74206f776e657200000000000000000000000000".hex()
        assert(err.encodeSignature().hex() == encoded.bytes.sliceArray(0 until SELECTOR_SIZE).hex())
        println(err.decode(encoded.bytes))
    }

    @Test
    fun test5() {

    }
}