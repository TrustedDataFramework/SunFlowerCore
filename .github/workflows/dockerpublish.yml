name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - release*

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*


env:
  IMAGE: tdos
  GITHUB_USERNAME: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.PROJECT_TOKEN }} 
jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/


  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      - name: setup jdk11
        uses: actions/setup-java@v2.2.0
        with:
          java-version: 11
          distribution: adopt-hotspot
          
      - name: Tencent Cloud TKE Cluster Credential Action
        # You may pin to the exact commit or the version.
        # uses: TencentCloud/tke-cluster-credential-action@b1071cab5dd4cebc26a6b7905cb42ac66156b29e
        uses: TencentCloud/tke-cluster-credential-action@v1
        with:
          # Tencent Cloud secret id. Should be referred to a encrypted environment variable
          secret_id: ${{ secrets.QCLOUD_SECRET_ID }}
          # Tencent Cloud secret key. Should be referred to a encrypted environment variable
          secret_key: ${{ secrets.QCLOUD_SECRET_KEY }}
          # TKE region
          tke_region: ${{ secrets.QCLOUD_TKE_REGION }}
          # TKE cluster id
          cluster_id: ${{ secrets.QCLOUD_TKE_CLUSTER_ID }}     
          
      # setup kubectl    
      - uses: azure/setup-kubectl@v1
        id: install          

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build image
        run: |
          ./gradlew bootJar # build jar file
          mkdir -p sunflower-core/docker/build
          cp sunflower-core/build/libs/*.jar sunflower-core/docker/build
          pushd sunflower-core/docker >> /dev/null
          docker build -t $IMAGE .
          popd >> /dev/null

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push image and update stateful sets
        run: |
          IMAGE_ID="${{ secrets.DOCKER_HUB_USERNAME }}/$IMAGE"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "release-" prefix from branch name 
          [[ "${{ github.ref }}" == "refs/heads/release-"* ]] && VERSION=$(echo $VERSION | sed -e 's/^release-//')    
          
          # Use Docker `latest` tag on release branch
          [ "$VERSION" == "release" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION 
          OP='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"IMAGE"}]'
          OP=echo $OP | sed -e "s/IMAGE/$IMAGE_ID:$VERSION/g"
          kubectl patch statefulset tdos-node --type='json' -p=\'$OP\'
          


           
                
